import telebot
import json
import os
import threading
import time

USER_DATA_FILE = "user_data.json"

def load_user_data():
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, "r") as file:
            return json.load(file)
    return {}

def save_user_data(user_data):
    with open(USER_DATA_FILE, "w") as file:
        json.dump(user_data, file, indent=4)

def get_user_data(user_id):
    user_data = load_user_data()
    if str(user_id) not in user_data:
        user_data[str(user_id)] = {
            "name": "",
            "score": 0,
            "tap_power": 1,
            "auto_tap": {"1": 0, "10": 0, "100": 0, "1000": 0}
        }
    return user_data[str(user_id)]

def update_user_data(user_id, data):
    user_data = load_user_data()
    user_data[str(user_id)] = data
    save_user_data(user_data)

def auto_tap(bot):
    while True:
        user_data = load_user_data()
        for user_id, data in user_data.items():
            auto_tap_income = (
                    data["auto_tap"]["1"] * 1 +
                    data["auto_tap"]["10"] * 10 +
                    data["auto_tap"]["100"] * 100 +
                    data["auto_tap"]["1000"] * 1000
            )
            data["score"] += auto_tap_income
            update_user_data(user_id, data)
        time.sleep(1)


bot = telebot.TeleBot("7715916868:AAEE208ePltIAG4WvAUjMcErYCqC7crh_b0")

PROMO_CODES = {
    "FREE10000": 10000,
    "BONUS50000": 50000,
    "MEGA1000000": 1000000
}

@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    if not user_data.get("name"):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–º—è
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Shishi4ka Coin! üí∞\n\n"
                                          "–≠—Ç–æ—Ç –±–æ—Ç –¥–∞–µ—Ç –≤–∞–º –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–µ–Ω—å–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å.\n"
                                          "1000 —Ç–∞–ø–æ–≤ = 100 —Ä—É–±–ª–µ–π. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n"
                                          "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(message, ask_name)
    else:
        show_main_menu(message)

def ask_name(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    name = message.text.strip()

    user_data_all = load_user_data()
    for user in user_data_all.values():
        if user["name"].lower() == name.lower():
            bot.send_message(message.chat.id,
                             "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.")
            bot.register_next_step_handler(message, ask_name)
            return

    user_data["name"] = name
    update_user_data(user_id, user_data)
    bot.send_message(message.chat.id,
                     f"–û—Ç–ª–∏—á–Ω–æ, {user_data['name']}! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å Shishi4ka Coin.")
    show_main_menu(message)

def show_main_menu(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
    btn_tap = telebot.types.KeyboardButton("–¢–∞–ø–Ω—É—Ç—å")
    btn_shop = telebot.types.KeyboardButton("–ú–∞–≥–∞–∑–∏–Ω")
    btn_leaders = telebot.types.KeyboardButton("–õ–∏–¥–µ—Ä—ã")
    btn_transfer = telebot.types.KeyboardButton("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏")
    markup.add(btn_tap, btn_shop, btn_leaders, btn_transfer)
    bot.send_message(
        message.chat.id,
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_data['name']}!\n"
        f"üí∞ –í–∞—à–∏ –æ—á–∫–∏: {user_data['score']}\n"
        f"üí™ –°–∏–ª–∞ —Ç–∞–ø–∞: {user_data['tap_power']}\n"
        f"ü§ñ –ê–≤—Ç–æ—Ç–∞–ø—ã: 1/s: {user_data['auto_tap']['1']}, 10/s: {user_data['auto_tap']['10']}, "
        f"100/s: {user_data['auto_tap']['100']}, 1000/s: {user_data['auto_tap']['1000']}",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == "–¢–∞–ø–Ω—É—Ç—å")
def tap(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    user_data["score"] += user_data["tap_power"]
    update_user_data(user_id, user_data)
    bot.send_message(message.chat.id, f"–í—ã —Ç–∞–ø–Ω—É–ª–∏! üí• –í–∞—à–∏ –æ—á–∫–∏: {user_data['score']}")

@bot.message_handler(func=lambda message: message.text == "–ú–∞–≥–∞–∑–∏–Ω")
def shop(message):
    markup = telebot.types.InlineKeyboardMarkup()
    btn_upgrade_tap = telebot.types.InlineKeyboardButton(
        f"üí™ +1 —Ç–∞–ø (100)", callback_data="upgrade_tap"
    )
    btn_buy_auto_1 = telebot.types.InlineKeyboardButton(
        f"ü§ñ 1/s (500)", callback_data="buy_auto_1"
    )
    btn_buy_auto_10 = telebot.types.InlineKeyboardButton(
        f"ü§ñ 10/s (5000)", callback_data="buy_auto_10"
    )
    btn_buy_auto_100 = telebot.types.InlineKeyboardButton(
        f"ü§ñ 100/s (50000)", callback_data="buy_auto_100"
    )
    btn_buy_auto_1000 = telebot.types.InlineKeyboardButton(
        f"ü§ñ 1000/s (500000)", callback_data="buy_auto_1000"
    )
    markup.add(btn_upgrade_tap, btn_buy_auto_1, btn_buy_auto_10, btn_buy_auto_100, btn_buy_auto_1000)
    bot.send_message(message.chat.id, "üõí –ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–õ–∏–¥–µ—Ä—ã")
def leaders(message):
    user_data = load_user_data()
    sorted_users = sorted(user_data.items(), key=lambda x: x[1]["score"], reverse=True)
    leaderboard = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n"
    for i, (user_id, data) in enumerate(sorted_users[:10], 1):
        leaderboard += f"{i}. {data['name']}: {data['score']} –æ—á–∫–æ–≤\n"
    bot.send_message(message.chat.id, leaderboard)

@bot.message_handler(func=lambda message: message.text == "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏")
def transfer_money(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–Ω–∏–∫ —Å—É–º–º–∞`\n\n"
                                      "–ü—Ä–∏–º–µ—Ä: `–ò–≤–∞–Ω 100`")
    bot.register_next_step_handler(message, process_transfer)


def process_transfer(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    try:
        recipient_name, amount = message.text.split()
        amount = int(amount)
        if amount <= 0:
            bot.send_message(message.chat.id, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return

        if amount > user_data["score"]:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
            return

        user_data_all = load_user_data()
        recipient_id = None
        for uid, data in user_data_all.items():
            if data["name"].lower() == recipient_name.lower():
                recipient_id = uid
                break

        if not recipient_id:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if str(recipient_id) == str(user_id):
            bot.send_message(message.chat.id, "‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
            return

        user_data["score"] -= amount
        recipient_data = get_user_data(recipient_id)
        recipient_data["score"] += amount
        update_user_data(user_id, user_data)
        update_user_data(recipient_id, recipient_data)
        bot.send_message(message.chat.id, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_name}.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–Ω–∏–∫ —Å—É–º–º–∞`")

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    user_data = get_user_data(user_id)

    if call.data == "upgrade_tap":
        if user_data["score"] >= 100:
            user_data["score"] -= 100
            user_data["tap_power"] += 1
            update_user_data(user_id, user_data)
            bot.answer_callback_query(call.id, "üí™ –¢–∞–ø —É–ª—É—á—à–µ–Ω!")
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤!")
    elif call.data == "buy_auto_1":
        if user_data["score"] >= 500:
            user_data["score"] -= 500
            user_data["auto_tap"]["1"] += 1
            update_user_data(user_id, user_data)
            bot.answer_callback_query(call.id, "ü§ñ –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä (1/s) –∫—É–ø–ª–µ–Ω!")
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤!")
    elif call.data == "buy_auto_10":
        if user_data["score"] >= 5000:
            user_data["score"] -= 5000
            user_data["auto_tap"]["10"] += 1
            update_user_data(user_id, user_data)
            bot.answer_callback_query(call.id, "ü§ñ –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä (10/s) –∫—É–ø–ª–µ–Ω!")
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤!")
    elif call.data == "buy_auto_100":
        if user_data["score"] >= 50000:
            user_data["score"] -= 50000
            user_data["auto_tap"]["100"] += 1
            update_user_data(user_id, user_data)
            bot.answer_callback_query(call.id, "ü§ñ –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä (100/s) –∫—É–ø–ª–µ–Ω!")
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤!")
    elif call.data == "buy_auto_1000":
        if user_data["score"] >= 500000:
            user_data["score"] -= 500000
            user_data["auto_tap"]["1000"] += 1
            update_user_data(user_id, user_data)
            bot.answer_callback_query(call.id, "ü§ñ –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä (1000/s) –∫—É–ø–ª–µ–Ω!")
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤!")

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"üí∞ –í–∞—à–∏ –æ—á–∫–∏: {user_data['score']}\n"
             f"üí™ –°–∏–ª–∞ —Ç–∞–ø–∞: {user_data['tap_power']}\n"
             f"ü§ñ –ê–≤—Ç–æ—Ç–∞–ø—ã: 1/s: {user_data['auto_tap']['1']}, 10/s: {user_data['auto_tap']['10']}, "
             f"100/s: {user_data['auto_tap']['100']}, 1000/s: {user_data['auto_tap']['1000']}",
        reply_markup=call.message.reply_markup
    )

@bot.message_handler(commands=["admin"])
def admin_panel(message):
    if message.text == "/admin hack":
        user_id = message.from_user.id
        user_data = get_user_data(user_id)
        user_data["score"] = float("inf")
        update_user_data(user_id, user_data)
        bot.send_message(message.chat.id, "üîì –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –£ –≤–∞—Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –¥–µ–Ω—å–≥–∏!")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

@bot.message_handler(commands=["promo"])
def promo(message):
    promo_code = message.text.split()[1] if len(message.text.split()) > 1 else None
    if promo_code in PROMO_CODES:
        user_id = message.from_user.id
        user_data = get_user_data(user_id)
        user_data["score"] += PROMO_CODES[promo_code]
        update_user_data(user_id, user_data)
        bot.send_message(message.chat.id, f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {PROMO_CODES[promo_code]} –æ—á–∫–æ–≤.")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.")

threading.Thread(target=auto_tap, args=(bot,), daemon=True).start()

bot.polling(none_stop=True)
